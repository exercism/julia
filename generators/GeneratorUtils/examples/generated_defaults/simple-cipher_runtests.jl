# canonical data version: 2.0.0
# This file was generated by a script.

using Test

include("simple-cipher.jl")

# The following lines are top-level comments in canonical-data.json; comments within cases
# are not included. Do not include these comments in the exercise's runtests.jl.
#
# Some of the strings used in this file are symbolic and do not represent their literal value. They are:
# cipher.key - Represents the Cipher key
# cipher.encode - Represents the output of the Cipher encode method
# new - Represents the Cipher initialization
# string.substring(start, length) - Represents a substring of 'string' that begins at index 'start' and is 'length' characters long

@testset "Random key cipher" begin
    @testset "Can encode" begin
        @test encode("aaaaaaaaaa") == "cipher.key.substring(0, plaintext.length)"
    end
    @testset "Can decode" begin
        @test decode("cipher.key.substring(0, expected.length)") == "aaaaaaaaaa"
    end
    @testset "Is reversible. I.e., if you apply decode in a encoded result, you must see the same plaintext encode parameter as a result of the decode method" begin
        @test decode("abcdefghij", "cipher.encode") == "abcdefghij"
    end
    @testset "Key is made only of lowercase letters" begin
        @test key() == Dict("match" => "^[a-z]+\$")
    end
end

@testset "Substitution cipher" begin
    @testset "Can encode" begin
        @test encode("abcdefghij", "aaaaaaaaaa") == "abcdefghij"
    end
    @testset "Can decode" begin
        @test decode("abcdefghij", "abcdefghij") == "aaaaaaaaaa"
    end
    @testset "Is reversible. I.e., if you apply decode in a encoded result, you must see the same plaintext encode parameter as a result of the decode method" begin
        @test decode("abcdefghij", "abcdefghij", "cipher.encode") == "abcdefghij"
    end
    @testset "Can double shift encode" begin
        @test encode("iamapandabear", "iamapandabear") == "qayaeaagaciai"
    end
    @testset "Can wrap on encode" begin
        @test encode("abcdefghij", "zzzzzzzzzz") == "zabcdefghi"
    end
    @testset "Can wrap on decode" begin
        @test decode("abcdefghij", "zabcdefghi") == "zzzzzzzzzz"
    end
    @testset "Can encode messages longer than the key" begin
        @test encode("abc", "iamapandabear") == "iboaqcnecbfcr"
    end
    @testset "Can decode messages longer than the key" begin
        @test decode("abc", "iboaqcnecbfcr") == "iamapandabear"
    end
end

