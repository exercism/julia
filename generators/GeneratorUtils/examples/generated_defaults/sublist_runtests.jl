# canonical data version: 1.1.0
# This file was generated by a script.

using Test

include("sublist.jl")

# The following lines are top-level comments in canonical-data.json; comments within cases
# are not included. Do not include these comments in the exercise's runtests.jl.
#
# Lists are ordered and sequential.
# https://en.wikipedia.org/wiki/List_%28abstract_data_type%29
# 
# Depending on your language, there may need to be some translation
# to go from the JSON array to the list representation.
# The expectation can be used to generate an expected value
# based on your implementation (such as a constant 'EQUAL', 'SUBLIST', etc.).
# 
# If appropriate for your track, you'll need to ensure that no pair of expected values are equal.
# Otherwise, an implementation that always returns a constant value may falsely pass the tests.
# See https://github.com/exercism/xpython/issues/342

@testset "empty lists" begin
    @test sublist([], []) == "equal"
end

@testset "empty list within non empty list" begin
    @test sublist([], [1, 2, 3]) == "sublist"
end

@testset "non empty list contains empty list" begin
    @test sublist([1, 2, 3], []) == "superlist"
end

@testset "list equals itself" begin
    @test sublist([1, 2, 3], [1, 2, 3]) == "equal"
end

@testset "different lists" begin
    @test sublist([1, 2, 3], [2, 3, 4]) == "unequal"
end

@testset "false start" begin
    @test sublist([1, 2, 5], [0, 1, 2, 3, 1, 2, 5, 6]) == "sublist"
end

@testset "consecutive" begin
    @test sublist([1, 1, 2], [0, 1, 1, 1, 2, 1, 2]) == "sublist"
end

@testset "sublist at start" begin
    @test sublist([0, 1, 2], [0, 1, 2, 3, 4, 5]) == "sublist"
end

@testset "sublist in middle" begin
    @test sublist([2, 3, 4], [0, 1, 2, 3, 4, 5]) == "sublist"
end

@testset "sublist at end" begin
    @test sublist([3, 4, 5], [0, 1, 2, 3, 4, 5]) == "sublist"
end

@testset "at start of superlist" begin
    @test sublist([0, 1, 2, 3, 4, 5], [0, 1, 2]) == "superlist"
end

@testset "in middle of superlist" begin
    @test sublist([0, 1, 2, 3, 4, 5], [2, 3]) == "superlist"
end

@testset "at end of superlist" begin
    @test sublist([0, 1, 2, 3, 4, 5], [3, 4, 5]) == "superlist"
end

@testset "first list missing element from second list" begin
    @test sublist([1, 3], [1, 2, 3]) == "unequal"
end

@testset "second list missing element from first list" begin
    @test sublist([1, 2, 3], [1, 3]) == "unequal"
end

@testset "order matters to a list" begin
    @test sublist([1, 2, 3], [3, 2, 1]) == "unequal"
end

@testset "same digits but different numbers" begin
    @test sublist([1, 0, 1], [10, 1]) == "unequal"
end

