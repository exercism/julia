# canonical data version: 1.2.0
# This file was generated by a script.

using Test

include("sgf-parsing.jl")

@testset "empty input" begin
    @test_throws ArgumentError parse("")
end

@testset "tree with no nodes" begin
    @test_throws ArgumentError parse("()")
end

@testset "node without tree" begin
    @test_throws ArgumentError parse(";")
end

@testset "node without properties" begin
    @test parse("(;)") == Dict("properties" => Dict(), "children" => Any[])
end

@testset "single node tree" begin
    @test parse("(;A[B])") == Dict("properties" => Dict("A" => ["B"]), "children" => Any[])
end

@testset "multiple properties" begin
    @test parse("(;A[b]C[d])") == Dict("properties" => Dict("A" => ["b"], "C" => ["d"]), "children" => Any[])
end

@testset "properties without delimiter" begin
    @test_throws ArgumentError parse("(;A)")
end

@testset "all lowercase property" begin
    @test_throws ArgumentError parse("(;a[b])")
end

@testset "upper and lowercase property" begin
    @test_throws ArgumentError parse("(;Aa[b])")
end

@testset "two nodes" begin
    @test parse("(;A[B];B[C])") == Dict("properties" => Dict("A" => ["B"]), "children" => OrderedDict{String,Any}[Dict("properties" => Dict("B" => ["C"]), "children" => Any[])])
end

@testset "two child trees" begin
    @test parse("(;A[B](;B[C])(;C[D]))") == Dict("properties" => Dict("A" => ["B"]), "children" => OrderedDict{String,Any}[Dict("properties" => Dict("B" => ["C"]), "children" => Any[]), Dict("properties" => Dict("C" => ["D"]), "children" => Any[])])
end

@testset "multiple property values" begin
    @test parse("(;A[b][c][d])") == Dict("properties" => Dict("A" => ["b", "c", "d"]), "children" => Any[])
end

@testset "escaped property" begin
    @test parse("(;A[\\]b\\nc\\nd\\t\\te \\n\\]])") == Dict("properties" => Dict("A" => ["]b\\nc\\nd  e \\n]"]), "children" => Any[])
end

