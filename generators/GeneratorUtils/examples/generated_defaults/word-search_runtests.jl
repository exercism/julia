# canonical data version: 1.2.1
# This file was generated by a script.

using Test

include("word-search.jl")

# The following lines are top-level comments in canonical-data.json; comments within cases
# are not included. Do not include these comments in the exercise's runtests.jl.
#
# Grid rows and columns are 1-indexed.

@testset "Should accept an initial game grid and a target search word" begin
    @test search(["jefblpepre"], ["clojure"]) == Dict("clojure" => nothing)
end

@testset "Should locate one word written left to right" begin
    @test search(["clojurermt"], ["clojure"]) == Dict("clojure" => Dict("start" => Dict("column" => 1, "row" => 1), "end" => Dict("column" => 7, "row" => 1)))
end

@testset "Should locate the same word written left to right in a different position" begin
    @test search(["mtclojurer"], ["clojure"]) == Dict("clojure" => Dict("start" => Dict("column" => 3, "row" => 1), "end" => Dict("column" => 9, "row" => 1)))
end

@testset "Should locate a different left to right word" begin
    @test search(["coffeelplx"], ["coffee"]) == Dict("coffee" => Dict("start" => Dict("column" => 1, "row" => 1), "end" => Dict("column" => 6, "row" => 1)))
end

@testset "Should locate that different left to right word in a different position" begin
    @test search(["xcoffeezlp"], ["coffee"]) == Dict("coffee" => Dict("start" => Dict("column" => 2, "row" => 1), "end" => Dict("column" => 7, "row" => 1)))
end

@testset "Should locate a left to right word in two line grid" begin
    @test search(["jefblpepre", "tclojurerm"], ["clojure"]) == Dict("clojure" => Dict("start" => Dict("column" => 2, "row" => 2), "end" => Dict("column" => 8, "row" => 2)))
end

@testset "Should locate a left to right word in three line grid" begin
    @test search(["camdcimgtc", "jefblpepre", "clojurermt"], ["clojure"]) == Dict("clojure" => Dict("start" => Dict("column" => 1, "row" => 3), "end" => Dict("column" => 7, "row" => 3)))
end

@testset "Should locate a left to right word in ten line grid" begin
    @test search(["jefblpepre", "camdcimgtc", "oivokprjsm", "pbwasqroua", "rixilelhrs", "wolcqlirpc", "screeaumgr", "alxhpburyi", "jalaycalmp", "clojurermt"], ["clojure"]) == Dict("clojure" => Dict("start" => Dict("column" => 1, "row" => 10), "end" => Dict("column" => 7, "row" => 10)))
end

@testset "Should locate that left to right word in a different position in a ten line grid" begin
    @test search(["jefblpepre", "camdcimgtc", "oivokprjsm", "pbwasqroua", "rixilelhrs", "wolcqlirpc", "screeaumgr", "alxhpburyi", "clojurermt", "jalaycalmp"], ["clojure"]) == Dict("clojure" => Dict("start" => Dict("column" => 1, "row" => 9), "end" => Dict("column" => 7, "row" => 9)))
end

@testset "Should locate a different left to right word in a ten line grid" begin
    @test search(["jefblpepre", "camdcimgtc", "oivokprjsm", "pbwasqroua", "rixilelhrs", "wolcqlirpc", "fortranftw", "alxhpburyi", "clojurermt", "jalaycalmp"], ["fortran"]) == Dict("fortran" => Dict("start" => Dict("column" => 1, "row" => 7), "end" => Dict("column" => 7, "row" => 7)))
end

@testset "Should locate multiple words" begin
    @test search(["jefblpepre", "camdcimgtc", "oivokprjsm", "pbwasqroua", "rixilelhrs", "wolcqlirpc", "fortranftw", "alxhpburyi", "jalaycalmp", "clojurermt"], ["fortran", "clojure"]) == Dict("clojure" => Dict("start" => Dict("column" => 1, "row" => 10), "end" => Dict("column" => 7, "row" => 10)), "fortran" => Dict("start" => Dict("column" => 1, "row" => 7), "end" => Dict("column" => 7, "row" => 7)))
end

@testset "Should locate a single word written right to left" begin
    @test search(["rixilelhrs"], ["elixir"]) == Dict("elixir" => Dict("start" => Dict("column" => 6, "row" => 1), "end" => Dict("column" => 1, "row" => 1)))
end

@testset "Should locate multiple words written in different horizontal directions" begin
    @test search(["jefblpepre", "camdcimgtc", "oivokprjsm", "pbwasqroua", "rixilelhrs", "wolcqlirpc", "screeaumgr", "alxhpburyi", "jalaycalmp", "clojurermt"], ["elixir", "clojure"]) == Dict("clojure" => Dict("start" => Dict("column" => 1, "row" => 10), "end" => Dict("column" => 7, "row" => 10)), "elixir" => Dict("start" => Dict("column" => 6, "row" => 5), "end" => Dict("column" => 1, "row" => 5)))
end

@testset "Should locate words written top to bottom" begin
    @test search(["jefblpepre", "camdcimgtc", "oivokprjsm", "pbwasqroua", "rixilelhrs", "wolcqlirpc", "screeaumgr", "alxhpburyi", "jalaycalmp", "clojurermt"], ["clojure", "elixir", "ecmascript"]) == Dict("clojure" => Dict("start" => Dict("column" => 1, "row" => 10), "end" => Dict("column" => 7, "row" => 10)), "elixir" => Dict("start" => Dict("column" => 6, "row" => 5), "end" => Dict("column" => 1, "row" => 5)), "ecmascript" => Dict("start" => Dict("column" => 10, "row" => 1), "end" => Dict("column" => 10, "row" => 10)))
end

@testset "Should locate words written bottom to top" begin
    @test search(["jefblpepre", "camdcimgtc", "oivokprjsm", "pbwasqroua", "rixilelhrs", "wolcqlirpc", "screeaumgr", "alxhpburyi", "jalaycalmp", "clojurermt"], ["clojure", "elixir", "ecmascript", "rust"]) == Dict("clojure" => Dict("start" => Dict("column" => 1, "row" => 10), "end" => Dict("column" => 7, "row" => 10)), "elixir" => Dict("start" => Dict("column" => 6, "row" => 5), "end" => Dict("column" => 1, "row" => 5)), "ecmascript" => Dict("start" => Dict("column" => 10, "row" => 1), "end" => Dict("column" => 10, "row" => 10)), "rust" => Dict("start" => Dict("column" => 9, "row" => 5), "end" => Dict("column" => 9, "row" => 2)))
end

@testset "Should locate words written top left to bottom right" begin
    @test search(["jefblpepre", "camdcimgtc", "oivokprjsm", "pbwasqroua", "rixilelhrs", "wolcqlirpc", "screeaumgr", "alxhpburyi", "jalaycalmp", "clojurermt"], ["clojure", "elixir", "ecmascript", "rust", "java"]) == Dict("clojure" => Dict("start" => Dict("column" => 1, "row" => 10), "end" => Dict("column" => 7, "row" => 10)), "elixir" => Dict("start" => Dict("column" => 6, "row" => 5), "end" => Dict("column" => 1, "row" => 5)), "ecmascript" => Dict("start" => Dict("column" => 10, "row" => 1), "end" => Dict("column" => 10, "row" => 10)), "rust" => Dict("start" => Dict("column" => 9, "row" => 5), "end" => Dict("column" => 9, "row" => 2)), "java" => Dict("start" => Dict("column" => 1, "row" => 1), "end" => Dict("column" => 4, "row" => 4)))
end

@testset "Should locate words written bottom right to top left" begin
    @test search(["jefblpepre", "camdcimgtc", "oivokprjsm", "pbwasqroua", "rixilelhrs", "wolcqlirpc", "screeaumgr", "alxhpburyi", "jalaycalmp", "clojurermt"], ["clojure", "elixir", "ecmascript", "rust", "java", "lua"]) == Dict("clojure" => Dict("start" => Dict("column" => 1, "row" => 10), "end" => Dict("column" => 7, "row" => 10)), "elixir" => Dict("start" => Dict("column" => 6, "row" => 5), "end" => Dict("column" => 1, "row" => 5)), "ecmascript" => Dict("start" => Dict("column" => 10, "row" => 1), "end" => Dict("column" => 10, "row" => 10)), "rust" => Dict("start" => Dict("column" => 9, "row" => 5), "end" => Dict("column" => 9, "row" => 2)), "java" => Dict("start" => Dict("column" => 1, "row" => 1), "end" => Dict("column" => 4, "row" => 4)), "lua" => Dict("start" => Dict("column" => 8, "row" => 9), "end" => Dict("column" => 6, "row" => 7)))
end

@testset "Should locate words written bottom left to top right" begin
    @test search(["jefblpepre", "camdcimgtc", "oivokprjsm", "pbwasqroua", "rixilelhrs", "wolcqlirpc", "screeaumgr", "alxhpburyi", "jalaycalmp", "clojurermt"], ["clojure", "elixir", "ecmascript", "rust", "java", "lua", "lisp"]) == Dict("clojure" => Dict("start" => Dict("column" => 1, "row" => 10), "end" => Dict("column" => 7, "row" => 10)), "elixir" => Dict("start" => Dict("column" => 6, "row" => 5), "end" => Dict("column" => 1, "row" => 5)), "ecmascript" => Dict("start" => Dict("column" => 10, "row" => 1), "end" => Dict("column" => 10, "row" => 10)), "rust" => Dict("start" => Dict("column" => 9, "row" => 5), "end" => Dict("column" => 9, "row" => 2)), "java" => Dict("start" => Dict("column" => 1, "row" => 1), "end" => Dict("column" => 4, "row" => 4)), "lua" => Dict("start" => Dict("column" => 8, "row" => 9), "end" => Dict("column" => 6, "row" => 7)), "lisp" => Dict("start" => Dict("column" => 3, "row" => 6), "end" => Dict("column" => 6, "row" => 3)))
end

@testset "Should locate words written top right to bottom left" begin
    @test search(["jefblpepre", "camdcimgtc", "oivokprjsm", "pbwasqroua", "rixilelhrs", "wolcqlirpc", "screeaumgr", "alxhpburyi", "jalaycalmp", "clojurermt"], ["clojure", "elixir", "ecmascript", "rust", "java", "lua", "lisp", "ruby"]) == Dict("clojure" => Dict("start" => Dict("column" => 1, "row" => 10), "end" => Dict("column" => 7, "row" => 10)), "elixir" => Dict("start" => Dict("column" => 6, "row" => 5), "end" => Dict("column" => 1, "row" => 5)), "ecmascript" => Dict("start" => Dict("column" => 10, "row" => 1), "end" => Dict("column" => 10, "row" => 10)), "rust" => Dict("start" => Dict("column" => 9, "row" => 5), "end" => Dict("column" => 9, "row" => 2)), "java" => Dict("start" => Dict("column" => 1, "row" => 1), "end" => Dict("column" => 4, "row" => 4)), "lua" => Dict("start" => Dict("column" => 8, "row" => 9), "end" => Dict("column" => 6, "row" => 7)), "lisp" => Dict("start" => Dict("column" => 3, "row" => 6), "end" => Dict("column" => 6, "row" => 3)), "ruby" => Dict("start" => Dict("column" => 8, "row" => 6), "end" => Dict("column" => 5, "row" => 9)))
end

@testset "Should fail to locate a word that is not in the puzzle" begin
    @test search(["jefblpepre", "camdcimgtc", "oivokprjsm", "pbwasqroua", "rixilelhrs", "wolcqlirpc", "screeaumgr", "alxhpburyi", "jalaycalmp", "clojurermt"], ["clojure", "elixir", "ecmascript", "rust", "java", "lua", "lisp", "ruby", "haskell"]) == Dict("clojure" => Dict("start" => Dict("column" => 1, "row" => 10), "end" => Dict("column" => 7, "row" => 10)), "elixir" => Dict("start" => Dict("column" => 6, "row" => 5), "end" => Dict("column" => 1, "row" => 5)), "ecmascript" => Dict("start" => Dict("column" => 10, "row" => 1), "end" => Dict("column" => 10, "row" => 10)), "rust" => Dict("start" => Dict("column" => 9, "row" => 5), "end" => Dict("column" => 9, "row" => 2)), "java" => Dict("start" => Dict("column" => 1, "row" => 1), "end" => Dict("column" => 4, "row" => 4)), "lua" => Dict("start" => Dict("column" => 8, "row" => 9), "end" => Dict("column" => 6, "row" => 7)), "lisp" => Dict("start" => Dict("column" => 3, "row" => 6), "end" => Dict("column" => 6, "row" => 3)), "ruby" => Dict("start" => Dict("column" => 8, "row" => 6), "end" => Dict("column" => 5, "row" => 9)), "haskell" => nothing)
end

