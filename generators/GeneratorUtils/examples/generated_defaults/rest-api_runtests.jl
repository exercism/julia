# canonical data version: 1.1.1
# This file was generated by a script.

using Test

include("rest-api.jl")

# The following lines are top-level comments in canonical-data.json; comments within cases
# are not included. Do not include these comments in the exercise's runtests.jl.
#
# The state of the API database before the request is represented
# by the input->database object. Your track may determine how this
# initial state is set.
# The input->payload and expected objects should be marshalled as
# strings in track implementation, as parsing and validating text
# payloads is an integral part of implementing a REST API.
# All arrays are ordered.

@testset "user management" begin
    @testset "no users" begin
        @test get(Dict("users" => Any[]), "/users") == Dict("users" => Any[])
    end
    @testset "add user" begin
        @test post(Dict("users" => Any[]), "/add", Dict("user" => "Adam")) == Dict("name" => "Adam", "owes" => Dict(), "owed_by" => Dict(), "balance" => 0.0)
    end
    @testset "get single user" begin
        @test get(Dict("users" => OrderedDict{String,Any}[Dict("name" => "Adam", "owes" => Dict(), "owed_by" => Dict(), "balance" => 0.0), Dict("name" => "Bob", "owes" => Dict(), "owed_by" => Dict(), "balance" => 0.0)]), "/users", Dict("users" => ["Bob"])) == Dict("users" => OrderedDict{String,Any}[Dict("name" => "Bob", "owes" => Dict(), "owed_by" => Dict(), "balance" => 0.0)])
    end
end

@testset "iou" begin
    @testset "both users have 0 balance" begin
        @test post(Dict("users" => OrderedDict{String,Any}[Dict("name" => "Adam", "owes" => Dict(), "owed_by" => Dict(), "balance" => 0.0), Dict("name" => "Bob", "owes" => Dict(), "owed_by" => Dict(), "balance" => 0.0)]), "/iou", Dict("lender" => "Adam", "borrower" => "Bob", "amount" => 3.0)) == Dict("users" => OrderedDict{String,Any}[Dict("name" => "Adam", "owes" => Dict(), "owed_by" => Dict("Bob" => 3.0), "balance" => 3.0), Dict("name" => "Bob", "owes" => Dict("Adam" => 3.0), "owed_by" => Dict(), "balance" => -3.0)])
    end
    @testset "borrower has negative balance" begin
        @test post(Dict("users" => OrderedDict{String,Any}[Dict("name" => "Adam", "owes" => Dict(), "owed_by" => Dict(), "balance" => 0.0), Dict("name" => "Bob", "owes" => Dict("Chuck" => 3.0), "owed_by" => Dict(), "balance" => -3.0), Dict("name" => "Chuck", "owes" => Dict(), "owed_by" => Dict("Bob" => 3.0), "balance" => 3.0)]), "/iou", Dict("lender" => "Adam", "borrower" => "Bob", "amount" => 3.0)) == Dict("users" => OrderedDict{String,Any}[Dict("name" => "Adam", "owes" => Dict(), "owed_by" => Dict("Bob" => 3.0), "balance" => 3.0), Dict("name" => "Bob", "owes" => Dict("Adam" => 3.0, "Chuck" => 3.0), "owed_by" => Dict(), "balance" => -6.0)])
    end
    @testset "lender has negative balance" begin
        @test post(Dict("users" => OrderedDict{String,Any}[Dict("name" => "Adam", "owes" => Dict(), "owed_by" => Dict(), "balance" => 0.0), Dict("name" => "Bob", "owes" => Dict("Chuck" => 3.0), "owed_by" => Dict(), "balance" => -3.0), Dict("name" => "Chuck", "owes" => Dict(), "owed_by" => Dict("Bob" => 3.0), "balance" => 3.0)]), "/iou", Dict("lender" => "Bob", "borrower" => "Adam", "amount" => 3.0)) == Dict("users" => OrderedDict{String,Any}[Dict("name" => "Adam", "owes" => Dict("Bob" => 3.0), "owed_by" => Dict(), "balance" => -3.0), Dict("name" => "Bob", "owes" => Dict("Chuck" => 3.0), "owed_by" => Dict("Adam" => 3.0), "balance" => 0.0)])
    end
    @testset "lender owes borrower" begin
        @test post(Dict("users" => OrderedDict{String,Any}[Dict("name" => "Adam", "owes" => Dict("Bob" => 3.0), "owed_by" => Dict(), "balance" => -3.0), Dict("name" => "Bob", "owes" => Dict(), "owed_by" => Dict("Adam" => 3.0), "balance" => 3.0)]), "/iou", Dict("lender" => "Adam", "borrower" => "Bob", "amount" => 2.0)) == Dict("users" => OrderedDict{String,Any}[Dict("name" => "Adam", "owes" => Dict("Bob" => 1.0), "owed_by" => Dict(), "balance" => -1.0), Dict("name" => "Bob", "owes" => Dict(), "owed_by" => Dict("Adam" => 1.0), "balance" => 1.0)])
    end
    @testset "lender owes borrower less than new loan" begin
        @test post(Dict("users" => OrderedDict{String,Any}[Dict("name" => "Adam", "owes" => Dict("Bob" => 3.0), "owed_by" => Dict(), "balance" => -3.0), Dict("name" => "Bob", "owes" => Dict(), "owed_by" => Dict("Adam" => 3.0), "balance" => 3.0)]), "/iou", Dict("lender" => "Adam", "borrower" => "Bob", "amount" => 4.0)) == Dict("users" => OrderedDict{String,Any}[Dict("name" => "Adam", "owes" => Dict(), "owed_by" => Dict("Bob" => 1.0), "balance" => 1.0), Dict("name" => "Bob", "owes" => Dict("Adam" => 1.0), "owed_by" => Dict(), "balance" => -1.0)])
    end
    @testset "lender owes borrower same as new loan" begin
        @test post(Dict("users" => OrderedDict{String,Any}[Dict("name" => "Adam", "owes" => Dict("Bob" => 3.0), "owed_by" => Dict(), "balance" => -3.0), Dict("name" => "Bob", "owes" => Dict(), "owed_by" => Dict("Adam" => 3.0), "balance" => 3.0)]), "/iou", Dict("lender" => "Adam", "borrower" => "Bob", "amount" => 3.0)) == Dict("users" => OrderedDict{String,Any}[Dict("name" => "Adam", "owes" => Dict(), "owed_by" => Dict(), "balance" => 0.0), Dict("name" => "Bob", "owes" => Dict(), "owed_by" => Dict(), "balance" => 0.0)])
    end
end

