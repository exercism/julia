# canonical data version: 2.4.0
# This file was generated by a script.

using Test

include("clock.jl")

# The following lines are top-level comments in canonical-data.json; comments within cases
# are not included. Do not include these comments in the exercise's runtests.jl.
#
# Most languages require constructing a clock with initial values,
# adding or subtracting some number of minutes, and testing equality
# in some language-native way.  Negative and out of range values are
# generally expected to wrap around rather than represent errors.

@testset "Create a new clock with an initial time" begin
    @testset "on the hour" begin
        @test create(8, 0) == "08:00"
    end
    @testset "past the hour" begin
        @test create(11, 9) == "11:09"
    end
    @testset "midnight is zero hours" begin
        @test create(24, 0) == "00:00"
    end
    @testset "hour rolls over" begin
        @test create(25, 0) == "01:00"
    end
    @testset "hour rolls over continuously" begin
        @test create(100, 0) == "04:00"
    end
    @testset "sixty minutes is next hour" begin
        @test create(1, 60) == "02:00"
    end
    @testset "minutes roll over" begin
        @test create(0, 160) == "02:40"
    end
    @testset "minutes roll over continuously" begin
        @test create(0, 1723) == "04:43"
    end
    @testset "hour and minutes roll over" begin
        @test create(25, 160) == "03:40"
    end
    @testset "hour and minutes roll over continuously" begin
        @test create(201, 3001) == "11:01"
    end
    @testset "hour and minutes roll over to exactly midnight" begin
        @test create(72, 8640) == "00:00"
    end
    @testset "negative hour" begin
        @test create(-1, 15) == "23:15"
    end
    @testset "negative hour rolls over" begin
        @test create(-25, 0) == "23:00"
    end
    @testset "negative hour rolls over continuously" begin
        @test create(-91, 0) == "05:00"
    end
    @testset "negative minutes" begin
        @test create(1, -40) == "00:20"
    end
    @testset "negative minutes roll over" begin
        @test create(1, -160) == "22:20"
    end
    @testset "negative minutes roll over continuously" begin
        @test create(1, -4820) == "16:40"
    end
    @testset "negative sixty minutes is previous hour" begin
        @test create(2, -60) == "01:00"
    end
    @testset "negative hour and minutes both roll over" begin
        @test create(-25, -160) == "20:20"
    end
    @testset "negative hour and minutes both roll over continuously" begin
        @test create(-121, -5810) == "22:10"
    end
end

@testset "Add minutes" begin
    @testset "add minutes" begin
        @test add(10, 0, 3) == "10:03"
    end
    @testset "add no minutes" begin
        @test add(6, 41, 0) == "06:41"
    end
    @testset "add to next hour" begin
        @test add(0, 45, 40) == "01:25"
    end
    @testset "add more than one hour" begin
        @test add(10, 0, 61) == "11:01"
    end
    @testset "add more than two hours with carry" begin
        @test add(0, 45, 160) == "03:25"
    end
    @testset "add across midnight" begin
        @test add(23, 59, 2) == "00:01"
    end
    @testset "add more than one day (1500 min = 25 hrs)" begin
        @test add(5, 32, 1500) == "06:32"
    end
    @testset "add more than two days" begin
        @test add(1, 1, 3500) == "11:21"
    end
end

@testset "Subtract minutes" begin
    @testset "subtract minutes" begin
        @test subtract(10, 3, 3) == "10:00"
    end
    @testset "subtract to previous hour" begin
        @test subtract(10, 3, 30) == "09:33"
    end
    @testset "subtract more than an hour" begin
        @test subtract(10, 3, 70) == "08:53"
    end
    @testset "subtract across midnight" begin
        @test subtract(0, 3, 4) == "23:59"
    end
    @testset "subtract more than two hours" begin
        @test subtract(0, 0, 160) == "21:20"
    end
    @testset "subtract more than two hours with borrow" begin
        @test subtract(6, 15, 160) == "03:35"
    end
    @testset "subtract more than one day (1500 min = 25 hrs)" begin
        @test subtract(5, 32, 1500) == "04:32"
    end
    @testset "subtract more than two days" begin
        @test subtract(2, 20, 3000) == "00:20"
    end
end

@testset "Compare two clocks for equality" begin
    @testset "clocks with same time" begin
        @test equal(Dict("hour" => 15, "minute" => 37), Dict("hour" => 15, "minute" => 37)) == true
    end
    @testset "clocks a minute apart" begin
        @test equal(Dict("hour" => 15, "minute" => 36), Dict("hour" => 15, "minute" => 37)) == false
    end
    @testset "clocks an hour apart" begin
        @test equal(Dict("hour" => 14, "minute" => 37), Dict("hour" => 15, "minute" => 37)) == false
    end
    @testset "clocks with hour overflow" begin
        @test equal(Dict("hour" => 10, "minute" => 37), Dict("hour" => 34, "minute" => 37)) == true
    end
    @testset "clocks with hour overflow by several days" begin
        @test equal(Dict("hour" => 3, "minute" => 11), Dict("hour" => 99, "minute" => 11)) == true
    end
    @testset "clocks with negative hour" begin
        @test equal(Dict("hour" => 22, "minute" => 40), Dict("hour" => -2, "minute" => 40)) == true
    end
    @testset "clocks with negative hour that wraps" begin
        @test equal(Dict("hour" => 17, "minute" => 3), Dict("hour" => -31, "minute" => 3)) == true
    end
    @testset "clocks with negative hour that wraps multiple times" begin
        @test equal(Dict("hour" => 13, "minute" => 49), Dict("hour" => -83, "minute" => 49)) == true
    end
    @testset "clocks with minute overflow" begin
        @test equal(Dict("hour" => 0, "minute" => 1), Dict("hour" => 0, "minute" => 1441)) == true
    end
    @testset "clocks with minute overflow by several days" begin
        @test equal(Dict("hour" => 2, "minute" => 2), Dict("hour" => 2, "minute" => 4322)) == true
    end
    @testset "clocks with negative minute" begin
        @test equal(Dict("hour" => 2, "minute" => 40), Dict("hour" => 3, "minute" => -20)) == true
    end
    @testset "clocks with negative minute that wraps" begin
        @test equal(Dict("hour" => 4, "minute" => 10), Dict("hour" => 5, "minute" => -1490)) == true
    end
    @testset "clocks with negative minute that wraps multiple times" begin
        @test equal(Dict("hour" => 6, "minute" => 15), Dict("hour" => 6, "minute" => -4305)) == true
    end
    @testset "clocks with negative hours and minutes" begin
        @test equal(Dict("hour" => 7, "minute" => 32), Dict("hour" => -12, "minute" => -268)) == true
    end
    @testset "clocks with negative hours and minutes that wrap" begin
        @test equal(Dict("hour" => 18, "minute" => 7), Dict("hour" => -54, "minute" => -11513)) == true
    end
    @testset "full clock and zeroed clock" begin
        @test equal(Dict("hour" => 24, "minute" => 0), Dict("hour" => 0, "minute" => 0)) == true
    end
end

