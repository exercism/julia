# canonical data version: 1.0.0
# This file was generated by a script.

using Test

include("diffie-hellman.jl")

# The following lines are top-level comments in canonical-data.json; comments within cases
# are not included. Do not include these comments in the exercise's runtests.jl.
#
# Optional tests to consider:
# * Validation of parameters:
#   Validate that `p`, `g` are valid.
#   Validate that keys given as inputs are valid.
#   Resources that show what happens if parameters are not validated:
#   http://cryptopals.com/sets/5/challenges/34
#   http://cryptopals.com/sets/5/challenges/35
# * Large numbers:
#   Although the calculations fundamentally do not require large numbers,
#   this is a reasonable real-world use for them
#   and it may be instructive to have an exercise on their use.
#   Consult tracks with this exercise (such as the Go track) for possible inputs to use.

@testset "private key is in range 1 .. p" begin
    @test private_key_is_in_range() == Dict("greaterThan" => 1, "lessThan" => "p")
end

@testset "private key is random" begin
    @test private_key_is_random() == Dict("random" => true)
end

@testset "can calculate public key using private key" begin
    @test public_key(23, 5, 6) == 8
end

@testset "can calculate secret using other party's public key" begin
    @test secret(23, 19, 6) == 2
end

@testset "key exchange" begin
    @test key_exchange(23, 5, "privateKey(p)", "privateKey(p)", "publicKey(p, g, alicePrivateKey)", "publicKey(p, g, bobPrivateKey)", "secret(p, bobPublicKey, alicePrivateKey)", "secret(p, alicePublicKey, bobPrivateKey)") == "secretA == secretB"
end

