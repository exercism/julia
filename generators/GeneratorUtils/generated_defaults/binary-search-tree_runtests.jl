# canonical data version: 1.0.0
# This file was generated by a script.

using Test

include("binary-search-tree.jl")

# The following lines are top-level comments in canonical-data.json; comments within cases
# are not included. Do not include these comments in the exercise's runtests.jl.
#
# Each test case assumes an empty/new tree.
# As per exercism/problem-specifications#996 key 'treeData' counts as an input
# to test generators.
# The key 'treeData' represents an array of numbers for which the data should be 
# inserted/added to the tree as it appears in the array from left to right.
# e.g. treeData: ['2', '1', '3', '6', '7', '5']
# Insert 2. Insert 1. Insert 3. Insert 6, so on...
# This canonical-data does not restrict the data type of array elements to either
# strings or integers.
# The key 'expected' represents tree state as JSON object of schema :
# {
#     'title':'nodeObject',
#     'type':'object',
#     'properties':{
#         'data':{
#             'type':'string'
#         },
#         'left':{
#             'type':'nodeObject'
#         },
#         'right':{
#             'type':'nodeObject'
#         }
#     },
#     'required':['data', 'left', 'right']
# }

@testset "data is retained" begin
    @test data(["4"]) == Dict("data" => "4", "left" => nothing, "right" => nothing)
end

@testset "insert data at proper node" begin
    @testset "smaller number at left node" begin
        @test data(["4", "2"]) == Dict("data" => "4", "left" => Dict("data" => "2", "left" => nothing, "right" => nothing), "right" => nothing)
    end
    @testset "same number at left node" begin
        @test data(["4", "4"]) == Dict("data" => "4", "left" => Dict("data" => "4", "left" => nothing, "right" => nothing), "right" => nothing)
    end
    @testset "greater number at right node" begin
        @test data(["4", "5"]) == Dict("data" => "4", "left" => nothing, "right" => Dict("data" => "5", "left" => nothing, "right" => nothing))
    end
end

@testset "can create complex tree" begin
    @test data(["4", "2", "6", "1", "3", "5", "7"]) == Dict("data" => "4", "left" => Dict("data" => "2", "left" => Dict("data" => "1", "left" => nothing, "right" => nothing), "right" => Dict("data" => "3", "left" => nothing, "right" => nothing)), "right" => Dict("data" => "6", "left" => Dict("data" => "5", "left" => nothing, "right" => nothing), "right" => Dict("data" => "7", "left" => nothing, "right" => nothing)))
end

@testset "can sort data" begin
    @testset "can sort single number" begin
        @test sorted_data(["2"]) == ["2"]
    end
    @testset "can sort if second number is smaller than first" begin
        @test sorted_data(["2", "1"]) == ["1", "2"]
    end
    @testset "can sort if second number is same as first" begin
        @test sorted_data(["2", "2"]) == ["2", "2"]
    end
    @testset "can sort if second number is greater than first" begin
        @test sorted_data(["2", "3"]) == ["2", "3"]
    end
    @testset "can sort complex tree" begin
        @test sorted_data(["2", "1", "3", "6", "7", "5"]) == ["1", "2", "3", "5", "6", "7"]
    end
end

