# canonical data version: 1.2.1
# This file was generated by a script.

using Test

include("triangle.jl")

# The following lines are top-level comments in canonical-data.json; comments within cases
# are not included. Do not include these comments in the exercise's runtests.jl.
#
#  Pursuant to discussion in #202, we have decided NOT to test triangles 
#  where all side lengths are positive but a + b = c. e.g:               
#  (2, 4, 2, Isosceles), (1, 3, 4, Scalene).                             
#  It's true that the triangle inequality admits such triangles.These    
#  triangles have zero area, however.                                    
#  They're degenerate triangles with all three vertices collinear.       
#  (In contrast, we will test (0, 0, 0, Illegal), as it is a point)      
#  The tests assert properties of the triangle are true or false.        
#  See: https://github.com/exercism/problem-specifications/issues/379 for disscussion  
#  of this approach                                                      
#  How you handle invalid triangles is up to you. These tests suggest a  
#  triangle is returned, but all of its properties are false. But you    
#  could also have the creation of an invalid triangle return an error   
#  or exception. Choose what is idiomatic for your language.             

@testset "equilateral triangle" begin
    @testset "all sides are equal" begin
        @test equilateral([2, 2, 2]) == true
    end
    @testset "any side is unequal" begin
        @test equilateral([2, 3, 2]) == false
    end
    @testset "no sides are equal" begin
        @test equilateral([5, 4, 6]) == false
    end
    @testset "all zero sides is not a triangle" begin
        @test equilateral([0, 0, 0]) == false
    end
    @testset "sides may be floats" begin
        @test equilateral([0.5, 0.5, 0.5]) == true
    end
end

@testset "isosceles triangle" begin
    @testset "last two sides are equal" begin
        @test isosceles([3, 4, 4]) == true
    end
    @testset "first two sides are equal" begin
        @test isosceles([4, 4, 3]) == true
    end
    @testset "first and last sides are equal" begin
        @test isosceles([4, 3, 4]) == true
    end
    @testset "equilateral triangles are also isosceles" begin
        @test isosceles([4, 4, 4]) == true
    end
    @testset "no sides are equal" begin
        @test isosceles([2, 3, 4]) == false
    end
    @testset "first triangle inequality violation" begin
        @test isosceles([1, 1, 3]) == false
    end
    @testset "second triangle inequality violation" begin
        @test isosceles([1, 3, 1]) == false
    end
    @testset "third triangle inequality violation" begin
        @test isosceles([3, 1, 1]) == false
    end
    @testset "sides may be floats" begin
        @test isosceles([0.5, 0.4, 0.5]) == true
    end
end

@testset "scalene triangle" begin
    @testset "no sides are equal" begin
        @test scalene([5, 4, 6]) == true
    end
    @testset "all sides are equal" begin
        @test scalene([4, 4, 4]) == false
    end
    @testset "two sides are equal" begin
        @test scalene([4, 4, 3]) == false
    end
    @testset "may not violate triangle inequality" begin
        @test scalene([7, 3, 2]) == false
    end
    @testset "sides may be floats" begin
        @test scalene([0.5, 0.4, 0.6]) == true
    end
end

