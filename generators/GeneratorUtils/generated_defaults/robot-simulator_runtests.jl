# canonical data version: 3.2.0
# This file was generated by a script.

using Test

include("robot-simulator.jl")

# The following lines are top-level comments in canonical-data.json; comments within cases
# are not included. Do not include these comments in the exercise's runtests.jl.
#
# Some tests have two expectations: one for the position, one for the direction
# Optionally, you can also test
#  - An invalid direction throws an error
#  - An invalid instruction throws an error
#  - Default starting position and direction if none are provided

@testset "Create robot" begin
    @testset "at origin facing north" begin
        @test create(Dict("x" => 0, "y" => 0), "north") == Dict("position" => Dict("x" => 0, "y" => 0), "direction" => "north")
    end
    @testset "at negative position facing south" begin
        @test create(Dict("x" => -1, "y" => -1), "south") == Dict("position" => Dict("x" => -1, "y" => -1), "direction" => "south")
    end
end

@testset "Rotating clockwise" begin
    @testset "changes north to east" begin
        @test move(Dict("x" => 0, "y" => 0), "north", "R") == Dict("position" => Dict("x" => 0, "y" => 0), "direction" => "east")
    end
    @testset "changes east to south" begin
        @test move(Dict("x" => 0, "y" => 0), "east", "R") == Dict("position" => Dict("x" => 0, "y" => 0), "direction" => "south")
    end
    @testset "changes south to west" begin
        @test move(Dict("x" => 0, "y" => 0), "south", "R") == Dict("position" => Dict("x" => 0, "y" => 0), "direction" => "west")
    end
    @testset "changes west to north" begin
        @test move(Dict("x" => 0, "y" => 0), "west", "R") == Dict("position" => Dict("x" => 0, "y" => 0), "direction" => "north")
    end
end

@testset "Rotating counter-clockwise" begin
    @testset "changes north to west" begin
        @test move(Dict("x" => 0, "y" => 0), "north", "L") == Dict("position" => Dict("x" => 0, "y" => 0), "direction" => "west")
    end
    @testset "changes west to south" begin
        @test move(Dict("x" => 0, "y" => 0), "west", "L") == Dict("position" => Dict("x" => 0, "y" => 0), "direction" => "south")
    end
    @testset "changes south to east" begin
        @test move(Dict("x" => 0, "y" => 0), "south", "L") == Dict("position" => Dict("x" => 0, "y" => 0), "direction" => "east")
    end
    @testset "changes east to north" begin
        @test move(Dict("x" => 0, "y" => 0), "east", "L") == Dict("position" => Dict("x" => 0, "y" => 0), "direction" => "north")
    end
end

@testset "Moving forward one" begin
    @testset "facing north increments Y" begin
        @test move(Dict("x" => 0, "y" => 0), "north", "A") == Dict("position" => Dict("x" => 0, "y" => 1), "direction" => "north")
    end
    @testset "facing south decrements Y" begin
        @test move(Dict("x" => 0, "y" => 0), "south", "A") == Dict("position" => Dict("x" => 0, "y" => -1), "direction" => "south")
    end
    @testset "facing east increments X" begin
        @test move(Dict("x" => 0, "y" => 0), "east", "A") == Dict("position" => Dict("x" => 1, "y" => 0), "direction" => "east")
    end
    @testset "facing west decrements X" begin
        @test move(Dict("x" => 0, "y" => 0), "west", "A") == Dict("position" => Dict("x" => -1, "y" => 0), "direction" => "west")
    end
end

@testset "Follow series of instructions" begin
    @testset "moving east and north from README" begin
        @test move(Dict("x" => 7, "y" => 3), "north", "RAALAL") == Dict("position" => Dict("x" => 9, "y" => 4), "direction" => "west")
    end
    @testset "moving west and north" begin
        @test move(Dict("x" => 0, "y" => 0), "north", "LAAARALA") == Dict("position" => Dict("x" => -4, "y" => 1), "direction" => "west")
    end
    @testset "moving west and south" begin
        @test move(Dict("x" => 2, "y" => -7), "east", "RRAAAAALA") == Dict("position" => Dict("x" => -3, "y" => -8), "direction" => "south")
    end
    @testset "moving east and north" begin
        @test move(Dict("x" => 8, "y" => 4), "south", "LAAARRRALLLL") == Dict("position" => Dict("x" => 11, "y" => 5), "direction" => "north")
    end
end

